Cómo crear un certificado de una Autoridad Certificadora y emitir certificados SSL/TLS
======================================================================================

Publicado el 29/01/2018 por Jorge en https://jorge.gd/2018/01/29/crear-certificado-de-una-autoridad-certificadora-y-emitir-certificados-ssl-tls/


Para lograr establecer conexiones seguras entre clientes y servidores debemos hacer uso del protocolo TLS (Transport Layer Security). El protocolo TLS, 
anteriormente SSL, usa certificados X.509 para autenticar al servidor y cifrar la información. El cifrado se realiza empleando la infraestructura de 
clave pública.

Disponemos de dos formas de obtener este certificado: pagando a una autoridad certificadora reconocida o generar nuestra propia autoridad certificadora y 
emitir un certificado. En este artículo vamos a crear nuestro propio certificado de una Autoridad Certificadora (CA).

Generar certificado de Autoridad Certificadora
-----------------------------------------------

Para generar un certificado de una Autoridad Certificadora el primer paso es generar una clave privada.

# openssl genrsa -out CA.key 2048

La clave se genera con la codificación PEM que permite almacenar distintas claves en distintos formatos y lo podemos identificar porque al mostrar 
su contenido encontramos estas líneas:

-----BEGIN CERTIFICATE-----
 .....
-----END CERTIFICATE-----

A partir de esta clave privada podemos generar un certificado autofirmado con el que emitiremos los certificados del servidor y de los usuarios. Con 
la siguiente orden creamos el certificado, indicamos que no use la codificación DES, que utilice el algoritmo de cifrado sha256 y los días de validez.

# openssl req -x509 -new -nodes -key CA.key -sha256 -days 1024 -out CA.pem

Nos preguntará por algunos datos que se incorporarán al certificado y servirán para identificar a la autoridad certificadora.

Por último, debemos importar este certificado como autoridad certificadora en los clientes, por ejemplo, en el navegador. De esta forma los clientes 
confiarán en los certificados emitidos por nuestra CA.


Generar certificado para el servidor
------------------------------------

Ahora debemos generar una solicitud de firma de certificado (CSR, Certificate Signing Request) que firmaremos con nuestro CA. El primer paso es generar 
otra clave privada.

# openssl genrsa -out tomcat.key 2048

A partir de la clave privada crearemos el CSR, para ello deberemos de ejecutar la siguiente instrucción e introducir los datos para el certificado. Es 
importante tener en cuenta que en el campo "Common Name" debemos introducir el nombre de dominio o la dirección IP del servidor.

# openssl req -new -key tomcat.key -out tomcat.csr

Una vez generado el fichero CSR debemos firmarlo usando el certificado de la CA.

# openssl x509 -req -in tomcat.csr -CA CA.pem -CAkey CA.key -CAcreateserial -out tomcat.crt -days 500 -sha256

Con la opción -CAcreateserial se añade un número de serie a cada certificado firmado.

Finalmente, disponemos de nuestros certificados autofirmado de una Autoridad Certificadora y podremos emitir certificados.

Como usar el certificado autogenerado en Tomcat y habilitar TLS/SSL

Hay varios métodos para utilizar TLS/SSL en Tomcat, en mi caso voy a usar la implementación incluida en Java para la cual necesitamos un almacén de claves 
en formato JKS que contenga el certificado del servidor.

Ya disponemos de un certificado para el servidor (tomcat.crt), pero Tomcat necesita un almacén en formato JKS. Para crear dicho almacén antes vamos a 
crear un almacén de claves en formato PKCS12, que más tarde convertiremos en JKS. En el almacén debemos añadir la clave privada, el certificado 
(que contiene la clave pública y la información proporcionada) y el certificado de la CA.

# openssl pkcs12 -export -in tomcat.crt -inkey tomcat.key -chain -CAfile CA.pem -name "tomcat" -out tomcat.p12

Con la opción -chain, indicamos que se concatenen los distintos certificados y con la opción -name proporcionamos un alias para identificar a la clave 
dentro del almacén (que debe ser "tomcat" para que el servidor Tomcat lo encuentre). Además, deberemos de especificar una contraseña (lo mejor es 
indicar siempre como contraseña "tomcat" tanto para el almacén de claves PKCS12 como par el almacén de claves JKS).

Ahora podemos convertir el fichero p12 a formato JKS, para ello usaremos la herramienta de Java keytool.

keytool -importkeystore -deststorepass tomcat -destkeystore tomcat.jks -srckeystore tomcat.p12 -srcstoretype PKCS12

Configuración de Tomcat
-----------------------

Debemos modificar el fichero server.xml, modificar la configuración del conector e indicar la ruta al almacén JKS y otros parámetros para activar 
el protocolo HTTPS. Suponiendo que hemos dejado el fichero "tomcat.jks" en la ruta "<TOMCAT_HOME>\conf\ssl\" la configuración del conector quedará 
así:
 
 Opción 1 (Sólo se incluye la configuración relacionada con TLS/SSL):

 <Server port="8005" shutdown="SHUTDOWN">
    ...
    <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
    <GlobalNamingResources>
    ...
    </GlobalNamingResources>
    <Service name="tomee">
        <Connector port="8080" protocol="org.apache.coyote.http11.Http11Nio2Protocol" 
                   maxPostSize="-1" disableUploadTimeout="false" 
                   connectionTimeout="20000" redirectPort="8443" 
                   URIEncoding="UTF-8" />

        <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"
                   maxThreads="150" SSLEnabled="true" >
            <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol"  />
            <SSLHostConfig>
                <Certificate certificateKeyFile="conf/ssl/CA.key"
                             certificateFile="conf/ssl/CA.pem"
                             certificateChainFile="conf/ssl/tomcat.cer"
                             type="RSA" />
            </SSLHostConfig>
        </Connector>
        <Engine defaultHost="localhost" name="tomee">
        ...
        </Engine>
    </Service>
</Server>

Opción 2 (Sólo se incluye la configuración relacionada con TLS/SSL): [[ ESTO HAY QUE PROBARLO ]]

<Server port="8005" shutdown="SHUTDOWN">
    ...
    <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
    <GlobalNamingResources>
    ...
    </GlobalNamingResources>
    <Service name="tomee">
        <Connector port="8080" protocol="org.apache.coyote.http11.Http11Nio2Protocol" 
                   maxPostSize="-1" disableUploadTimeout="false" 
                   connectionTimeout="20000" redirectPort="8443" 
                   URIEncoding="UTF-8" />

        <Connector port="8443" protocol="org.apache.coyote.http11.Http11Nio2Protocol"
                   maxThreads="200" scheme="https" secure="true" 
                   SSLEnabled="true" sslProtocol="TLS" clientAuth="false" 
                   />
            <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol"  />
            <SSLHostConfig hostName="localhost" protocols="+TLSv1.2,+TLSv1.3"> 
                <Certificate certificateKeystoreFile="conf/ssl/tomcat.jks" certificateKeystorePassword="tomcat"
                             certificateKeyFile="conf/ssl/CA.key" certificateFile="conf/ssl/CA.pem"
                             certificateChainFile="conf/ssl/tomcat.cer" certificateKeyAlias="tomcat"
                             type="RSA" />
            </SSLHostConfig>
        </Connector>
        <Engine defaultHost="localhost" name="tomee">
        ...
        </Engine>
    </Service>
</Server>



La contraseña que indicamos en la opción -deststorepass del comando keytool debe coincidir con el valor del atributo keystorePass de la etiqueta 
Connector en el fichero "server.xml".

Debemos asegurarnos que solo el usuario que ejecuta el servidor Tomcat tenga acceso a los certificados y los almacenes de claves.

Al reiniciar el servicio del servidor ya podremos acceder por HTTPS.
